coverage :ContentsCover
    use :CoverDetail,:OtherContents,:SumInsured,:Amount ,{:default_value => '20000'}
    use :CoverDetail,:OtherContents,:Excess,:Amount, {:default_value => '200'}
    use :CoverDetail,:OtherStock,:SumInsured,:Amount, {:default_value => '10000'}
    use :CoverDetail,:OtherStock,:Excess,:Amount, {:default_value => '200'}
    #need to implement a mechanism for defining and array for 'has-many' elements in the dictionary
    use :CoverDetail,:TargetStock,:SumInsured,:Amount, {:default_value => '1000'}#, :ABI_code => 'B550 002', :ABI_desc => 'Wines Fortified Wines And Spirits'}
    use :CoverDetail,:TargetStock,:Excess,:Amount, {:default_value => '200'}
    #schema-gen fails to create a valid schema here because it encounters a duplicate xpath to create so next line commented out
    #use :CoverDetail,:TargetStock,:SumInsured,:Amount, {:default_value => '1000'}#, :ABI_code => 'B550 001', :ABI_desc => 'Cigarettes Cigars And Tobacco '}
    #use :CoverDetail,:TargetStock,:Excess,:Amount, {:default_value => '200'}
    use :CoverDetail,:PremiumQuoteBreakdown,:GrossAmount
endcoverage